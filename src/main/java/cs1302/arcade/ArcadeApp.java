package cs1302.arcade;

import java.util.Random;
import java.util.ArrayList;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;

public class ArcadeApp{
//extends Application {

    //Group group = new Group();           // main container
    Random rgn = new Random();           // random number generator
    //Rectangle r = new Rectangle(20, 20); // some rectangle
    private int[][] board;

    /**
     *This is the constructor that sets the board to size 4X4
     */
    public ArcadeApp(){
	//this is initializing a board every time a new game is being created
        board=new int[4][4];
    }

    /**
     *This method is used to print the 2D array that we create. It just shows the 
     *internal part of the game
     */
    public void print(){
        for(int[] x: board){
            //setting the format for printing the board
            System.out.format("%6d%6d%6d%6d%n",x[0],x[1],x[2],x[3]);
        }
	System.out.println(); //adding empty line below for formating
    }

    /**
     *This method is used when beginning a new game. It places randomly the number 2 into
     *the board. 
     */
    public void addNewRandom(){
	//creating a new ArrayList that holds all of the blank empty spaces
	ArrayList<Integer> blankSpacesX= new ArrayList<Integer>(); //creating to hold X
	ArrayList<Integer> blankSpacesY= new ArrayList<Integer>(); //creating to hold Y
	//going through the board and recording which areas are empty or not
	for(int row=0;row<4;row++){
	    for(int col=0;col<4;col++){
		if(board[row][col]==0){
		    Integer integerX= new Integer(row); //converting int to Integer
		    Integer integerY=new Integer(col);
		    blankSpacesX.add(integerX); //adding the  x coordinate of empty space into array
		    blankSpacesY.add(integerY); //adding the y coordinate of empty space to array
		}
	    }
	}
	int choice= rgn.nextInt(blankSpacesX.size()); //using blankSpacesX b/c same size as y
	int changingX=blankSpacesX.get(choice); //getting the x coordinate of the random spot
	int changingY=blankSpacesY.get(choice); //getting the y coordinate of the random spot
	board[changingX][changingY]=2; //setting that random location with a 2
    }
    /*
    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    /*
    private EventHandler<? super MouseEvent> createMouseHandler() {
	return event -> {
	    System.out.println(event);
	    r.setX(rng.nextDouble() * (640 - r.getWidth()));
	    r.setY(rng.nextDouble() * (480 - r.getHeight()));
	};
    } // createMouseHandler
    */

    /*
    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    /*
    private EventHandler<? super KeyEvent> createKeyHandler() {
	return event -> {
	    System.out.println(event);
	    if (event.getCode() == KeyCode.LEFT)  r.setX(r.getX() - 10.0);
	    if (event.getCode() == KeyCode.RIGHT) r.setX(r.getX() + 10.0);
	    // TODO bounds checking
	};
    } // createKeyHandler

    /** {@inheritdoc} */
    /*
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */
    /*
        r.setX(50);                                // 50px in the x direction (right)
        r.setY(50);                                // 50ps in the y direction (down)
        group.getChildren().add(r);                // add to main container
        //r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly
        group.setOnKeyPressed(createKeyHandler()); // left-right key presses move the rectangle

        Scene scene = new Scene(group, 640, 480);
        stage.setTitle("cs1302-arcade!");
        stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

    } // start
    */
} // ArcadeApp
